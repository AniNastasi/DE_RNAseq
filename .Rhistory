library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(edgeR)
install.packages("tidyverse", "edgeR")
install.packages(c("tidyverse", "edgeR"))
library(tidyverse)
library(edgeR)
install.packages(c("tidyverse", "limma", "edgeR"))
library(tidyverse)
library(edgeR)
library(limma)
library(edgeR)
# Set file paths
counts_file <- "D:/Research/GEO/GSE146853/raw_counts.csv"
metadata_file <- "D:/Research/GEO/GSE146853/metadata.csv"
output_file <- "D:/Research/GEO/GSE146853/Results/filtered_counts.csv"
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
# Set file paths
counts_file <- "D:/Research/GEO/GSE146853/raw_counts.csv"
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
metadata <- read.csv(metadata_file, sep = "\t")
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>% filter(!is.na(Disease), Disease != "NA")
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>% filter(!is.na(Disease), Disease != "NA", Disease != "")
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>% filter(!is.na(Disease), Disease != "NA", Disease != "")
metadata <- read.csv(metadata_file, sep = "\t")
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>% filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(SampleName %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$SampleName), ]
# Filter out low-expressed genes
keep <- filterByExpr(raw_counts, group = metadata$Disease)
filtered_counts <- raw_counts[keep, ]
# Save filtered counts
write.csv(filtered_counts, file = output_file)
output_file <- "D:/Research/GEO/GSE146853/Results/filtered_counts.csv"
filtered_counts <- raw_counts[keep, ]
# Filter out low-expressed genes
keep <- filterByExpr(raw_counts, group = metadata$Disease)
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(SampleName %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$SampleName), ]
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts, group = metadata$Disease)
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
head(raw_counts)
dim(raw_counts)
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts)
## Samples can be merged into groups
group <- paste(metadata$Disease)
group
# Convert to factor
group <- factor(group)
# Take another look.
group
# Add the group information into the DGEList
metadata$group <- group
metadata
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(SampleName %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$SampleName), ]
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts, group = metadata$Disease)
# Sanitize column names (remove extra spaces, unify format)
colnames(raw_counts) <- trimws(colnames(raw_counts))
metadata$SampleName <- trimws(metadata$Sample_ID)
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$Sample_ID)
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(Sample_ID %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$Sample_ID), ]
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts, group = metadata$Disease)
# Check if any common samples exist
if (length(common_samples) == 0) {
stop("No matching sample names found between raw_counts and metadata.")
}
metadata_file <- "D:/Research/GEO/GSE146853/metadata.csv"
output_file <- "D:/Research/GEO/GSE146853/Results/filtered_counts.csv"
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
metadata <- read.csv(metadata_file, sep = "\t")
metadata
head(counts_file)
head(raw_counts)
dim(metadata)
dim(raw_counts)
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
dim(raw_counts)
head(raw_counts)
head(metadata)
metadata$SampleName <- trimws(metadata$SampleName)
# Sanitize column names (remove extra spaces, unify format)
colnames(raw_counts) <- trimws(colnames(raw_counts))
metadata$SampleName <- trimws(metadata$SampleName)
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
# Check if any common samples exist
if (length(common_samples) == 0) {
stop("No matching sample names found between raw_counts and metadata.")
}
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(SampleName %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$SampleName), ]
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts, group = metadata$Disease)
keep <- filterByExpr(dge, group = dge$samples$group)
filtered_counts <- dge$counts[keep, ]
# Save filtered counts
write.csv(filtered_counts, file = output_file)
output_file <- "D:/Research/GEO/GSE146853/Results/filtered_counts.csv"
# Save filtered counts
write.csv(filtered_counts, file = output_file)
# Save filtered counts
dir.create(dirname(output_file), showWarnings = FALSE, recursive = TRUE)
write.csv(filtered_counts, file = output_file)
dim(filtered_counts)
dim(raw_counts)
# Save filtered counts
write.csv(filtered_counts, file = output_file)
output_file <- "D:/Research/GEO/GSE146853/filtered_counts.csv"
# Save filtered counts
write.csv(filtered_counts, file = output_file)
