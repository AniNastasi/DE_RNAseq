library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(edgeR)
install.packages("tidyverse", "edgeR")
install.packages(c("tidyverse", "edgeR"))
library(tidyverse)
library(edgeR)
install.packages(c("tidyverse", "limma", "edgeR"))
library(tidyverse)
library(edgeR)
library(limma)
library(edgeR)
# Set file paths
counts_file <- "D:/Research/GEO/GSE146853/raw_counts.csv"
metadata_file <- "D:/Research/GEO/GSE146853/metadata.csv"
output_file <- "D:/Research/GEO/GSE146853/Results/filtered_counts.csv"
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
# Set file paths
counts_file <- "D:/Research/GEO/GSE146853/raw_counts.csv"
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
metadata <- read.csv(metadata_file, sep = "\t")
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>% filter(!is.na(Disease), Disease != "NA")
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>% filter(!is.na(Disease), Disease != "NA", Disease != "")
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>% filter(!is.na(Disease), Disease != "NA", Disease != "")
metadata <- read.csv(metadata_file, sep = "\t")
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>% filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(SampleName %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$SampleName), ]
# Filter out low-expressed genes
keep <- filterByExpr(raw_counts, group = metadata$Disease)
filtered_counts <- raw_counts[keep, ]
# Save filtered counts
write.csv(filtered_counts, file = output_file)
output_file <- "D:/Research/GEO/GSE146853/Results/filtered_counts.csv"
filtered_counts <- raw_counts[keep, ]
# Filter out low-expressed genes
keep <- filterByExpr(raw_counts, group = metadata$Disease)
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(SampleName %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$SampleName), ]
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts, group = metadata$Disease)
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
head(raw_counts)
dim(raw_counts)
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts)
## Samples can be merged into groups
group <- paste(metadata$Disease)
group
# Convert to factor
group <- factor(group)
# Take another look.
group
# Add the group information into the DGEList
metadata$group <- group
metadata
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(SampleName %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$SampleName), ]
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts, group = metadata$Disease)
# Sanitize column names (remove extra spaces, unify format)
colnames(raw_counts) <- trimws(colnames(raw_counts))
metadata$SampleName <- trimws(metadata$Sample_ID)
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$Sample_ID)
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(Sample_ID %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$Sample_ID), ]
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts, group = metadata$Disease)
# Check if any common samples exist
if (length(common_samples) == 0) {
stop("No matching sample names found between raw_counts and metadata.")
}
metadata_file <- "D:/Research/GEO/GSE146853/metadata.csv"
output_file <- "D:/Research/GEO/GSE146853/Results/filtered_counts.csv"
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
metadata <- read.csv(metadata_file, sep = "\t")
metadata
head(counts_file)
head(raw_counts)
dim(metadata)
dim(raw_counts)
# Read input files
raw_counts <- read.csv(counts_file, row.names = 1)
dim(raw_counts)
head(raw_counts)
head(metadata)
metadata$SampleName <- trimws(metadata$SampleName)
# Sanitize column names (remove extra spaces, unify format)
colnames(raw_counts) <- trimws(colnames(raw_counts))
metadata$SampleName <- trimws(metadata$SampleName)
# Clean metadata (remove NA or invalid Disease samples)
metadata <- metadata %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), metadata$SampleName)
# Check if any common samples exist
if (length(common_samples) == 0) {
stop("No matching sample names found between raw_counts and metadata.")
}
raw_counts <- raw_counts[, common_samples]
metadata <- metadata %>% filter(SampleName %in% common_samples)
# Ensure sample order matches
metadata <- metadata[match(colnames(raw_counts), metadata$SampleName), ]
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts, group = metadata$Disease)
keep <- filterByExpr(dge, group = dge$samples$group)
filtered_counts <- dge$counts[keep, ]
# Save filtered counts
write.csv(filtered_counts, file = output_file)
output_file <- "D:/Research/GEO/GSE146853/Results/filtered_counts.csv"
# Save filtered counts
write.csv(filtered_counts, file = output_file)
# Save filtered counts
dir.create(dirname(output_file), showWarnings = FALSE, recursive = TRUE)
write.csv(filtered_counts, file = output_file)
dim(filtered_counts)
dim(raw_counts)
# Save filtered counts
write.csv(filtered_counts, file = output_file)
output_file <- "D:/Research/GEO/GSE146853/filtered_counts.csv"
# Save filtered counts
write.csv(filtered_counts, file = output_file)
# Metadata: clean and filter
metadata <- read.csv(metadata_file, row.names = "SampleName")
library(tidyverse)
library(limma)
library(edgeR)
# Set file paths
counts_file <- "D:/Research/GEO/GSE146853/raw_counts.csv"
metadata_file <- "D:/Research/GEO/GSE146853/metadata.csv"
output_counts_file <- "D:/Research/GEO/GSE146853/filtered_counts.csv"
output_metadata_file <- "D:/Research/GEO/GSE146853/filtered_metadata.csv"
# Metadata: clean and filter
metadata <- read.csv(metadata_file, row.names = "SampleName")
filtered_metadata <- metadata %>%
mutate(Sample_ID = gsub("-", ".", gsub("_GeneCount", "", Sample_ID))) %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
metadata$Sample_ID <- trimws(metadata$Sample_ID)
filtered_metadata <- metadata %>%
mutate(Sample_ID = gsub("-", ".", gsub("_GeneCount", "", Sample_ID))) %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
metadata_file <- "D:/Research/GEO/GSE146853/metadata.csv"
# Metadata: clean and filter
metadata <- read.csv(metadata_file, row.names = "SampleName")
metadata$Sample_ID <- trimws(metadata$Sample_ID)
filtered_metadata <- metadata %>%
mutate(Sample_ID = gsub("-", ".", gsub("_GeneCount", "", Sample_ID))) %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
# Raw counts: clean and filter
colnames(raw_counts) <- trimws(colnames(raw_counts))
colnames(raw_counts) <- gsub("_GeneCount", "", colnames(raw_counts))
colnames(raw_counts) <- gsub("-", ".", colnames(raw_counts))
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), filtered_metadata$Sample_ID)
# Check if any common samples exist
if (length(common_samples) == 0) {
stop("No matching sample names found between raw_counts and metadata.")
}
# Set file paths
counts_file <- "D:/Research/GEO/GSE146853/raw_counts.csv"
metadata_file <- "D:/Research/GEO/GSE146853/metadata.csv"
output_counts_file <- "D:/Research/GEO/GSE146853/filtered_counts.csv"
output_metadata_file <- "D:/Research/GEO/GSE146853/filtered_metadata.csv"
# Metadata: clean and filter
metadata <- read.csv(metadata_file, row.names = "SampleName")
metadata$Sample_ID <- trimws(metadata$Sample_ID)
filtered_metadata <- metadata %>%
mutate(Sample_ID = gsub("-", ".", gsub("_GeneCount", "", Sample_ID))) %>%
filter(!is.na(Disease), Disease != "NA", Disease != "")
head(filtered_metadata)
# Raw counts: clean and filter
raw_counts <- read.csv(counts_file, row.names = "GeneID")
colnames(raw_counts) <- trimws(colnames(raw_counts))
colnames(raw_counts) <- gsub("_GeneCount", "", colnames(raw_counts))
colnames(raw_counts) <- gsub("-", ".", colnames(raw_counts))
head(raw_counts)
# Keep only samples that exist in both metadata and counts
common_samples <- intersect(colnames(raw_counts), filtered_metadata$Sample_ID)
# Check if any common samples exist
if (length(common_samples) == 0) {
stop("No matching sample names found between raw_counts and metadata.")
}
raw_counts <- raw_counts[, common_samples]
filtered_metadata <- filtered_metadata %>% filter(Sample_ID %in% common_samples)
filtered_metadata <- filtered_metadata[match(colnames(raw_counts), filtered_metadata$Sample_ID), ]
# Create DGEList and filter lowly expressed genes
dge <- DGEList(counts = raw_counts, group = filtered_metadata$Disease)
keep <- filterByExpr(dge, group = dge$samples$group)
filtered_counts <- dge$counts[keep, ]
# Save filtered counts
write.csv(filtered_counts, file = output_counts_file)
write.csv(filtered_metadata, file = output_metadata_file)
install.packages(c("tidyverse", "limma", "edgeR"))
library(DESeq2)
library(dplyr)
counts <- read.csv("D:/Research/GEO/GSE146853/filtered_counts.csv", check.names = FALSE, row.names = 1)
metadata <- read.csv("D:/Research/GEO/GSE146853/filtered_metadata.csv", check.names = FALSE)
head(counts)
head(metadata)
colnames(metadata) <- make.names(colnames(metadata), unique = TRUE)
metadata <- metadata[, c("Disease", "Sample_ID")]
metadata$Patient_ID <- sub("\\.\\d+$", "", metadata$Sample_ID)
# Identify patients with exactly 2 replicates
replicated <- metadata %>%
group_by(Patient_ID) %>%
tally() %>%
filter(n == 2) %>%
pull(Patient_ID)
# Filter metadata
metadata_filtered <- metadata %>%
filter(Patient_ID %in% replicated | Disease == "Healthy")
# Output folder
outdir <- "D:/Research/GEO/GSE146853/DESeq2"
dir.create(outdir, showWarnings = FALSE)
# Loop through each patient (with replicates)
patients_to_test <- metadata_filtered %>%
filter(Disease != "Healthy") %>%
pull(Patient_ID) %>%
unique()
for (patient_id in patients_to_test) {
disease <- metadata_filtered %>%
filter(Patient_ID == patient_id) %>%
pull(Disease) %>%
unique()
# Select samples: 2 for patient + all healthy
selected_samples <- metadata_filtered %>%
filter(Disease == "Healthy" | Patient_ID == patient_id)
sample_ids <- selected_samples$Sample_ID
cond <- ifelse(selected_samples$Disease == "Healthy", "Healthy", disease)
condition <- factor(cond, levels = c("Healthy", disease))
# Build colData
coldata <- data.frame(row.names = sample_ids,
Condition = condition)
# Subset count matrix
counts_sub <- counts[, sample_ids]
# Run DESeq2
dds <- DESeqDataSetFromMatrix(countData = round(counts_sub),
colData = coldata,
design = ~ Condition)
dds <- DESeq(dds)
res <- results(dds)
# Save results
out_file <- file.path(outdir, paste0("DEG_", patient_id, "_", disease, "_vs_Healthy.csv"))
write.csv(as.data.frame(res), out_file)
cat("DESeq2 done:", patient_id, "-", disease, "\n")
}
# Output folder
outdir <- "D:/Research/GEO/GSE146853/Results/DESeq2"
dir.create(outdir, showWarnings = FALSE)
# Loop through each patient (with replicates)
patients_to_test <- metadata_filtered %>%
filter(Disease != "Healthy") %>%
pull(Patient_ID) %>%
unique()
for (patient_id in patients_to_test) {
disease <- metadata_filtered %>%
filter(Patient_ID == patient_id) %>%
pull(Disease) %>%
unique()
# Select samples: 2 for patient + all healthy
selected_samples <- metadata_filtered %>%
filter(Disease == "Healthy" | Patient_ID == patient_id)
sample_ids <- selected_samples$Sample_ID
cond <- ifelse(selected_samples$Disease == "Healthy", "Healthy", disease)
condition <- factor(cond, levels = c("Healthy", disease))
# Build colData
coldata <- data.frame(row.names = sample_ids,
Condition = condition)
# Subset count matrix
counts_sub <- counts[, sample_ids]
# Run DESeq2
dds <- DESeqDataSetFromMatrix(countData = round(counts_sub),
colData = coldata,
design = ~ Condition)
dds <- DESeq(dds)
res <- results(dds)
# Save results
out_file <- file.path(outdir, paste0("DEG_", patient_id, "_", disease, "_vs_Healthy.csv"))
write.csv(as.data.frame(res), out_file)
cat("DESeq2 done:", patient_id, "-", disease, "\n")
}
